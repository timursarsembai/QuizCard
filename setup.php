<?php
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
error_reporting(E_ALL);
ini_set('display_errors', 1);

require_once 'config/database.php';

echo "<!DOCTYPE html>
<html lang='ru'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>QuizCard - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 2rem auto; padding: 2rem; }
        .success { color: #28a745; }
        .error { color: #dc3545; }
        .warning { color: #ffc107; }
        .info { color: #17a2b8; }
        .section { margin: 2rem 0; padding: 1rem; border: 1px solid #ddd; border-radius: 5px; }
        .btn { padding: 0.5rem 1rem; background: #007bff; color: white; text-decoration: none; border-radius: 3px; display: inline-block; margin: 0.5rem 0; }
        .btn-danger { background: #dc3545; }
        pre { background: #f8f9fa; padding: 1rem; border-radius: 3px; overflow-x: auto; }
    </style>
</head>
<body>";

echo "<h1>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö QuizCard</h1>";

// –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
$force_recreate = isset($_GET['force']) && $_GET['force'] === 'true';

try {
    $database = new Database();
    $db = $database->getConnection();
    
    if (!$db) {
        echo "<div class='section'>";
        echo "<h2 class='error'>‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h2>";
        echo "<p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ config/database.php:</p>";
        echo "<ul>";
        echo "<li>–•–æ—Å—Ç: localhost</li>";
        echo "<li>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ramazang_quiz</li>";
        echo "<li>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ramazang_qusr</li>";
        echo "<li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω</li>";
        echo "</ul>";
        echo "</div>";
        exit;
    }
    
    echo "<div class='section'>";
    echo "<h2 class='success'>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!</h2>";
    echo "</div>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    echo "<div class='section'>";
    echo "<h2>üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>";
    
    $tables_to_check = ['users', 'decks', 'deck_assignments', 'vocabulary', 'learning_progress'];
    $existing_tables = [];
    $missing_tables = [];
    
    foreach ($tables_to_check as $table) {
        $query = "SHOW TABLES LIKE '$table'";
        $stmt = $db->prepare($query);
        $stmt->execute();
        
        if ($stmt->rowCount() > 0) {
            $existing_tables[] = $table;
            echo "<span class='success'>‚úÖ –¢–∞–±–ª–∏—Ü–∞ '$table' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</span><br>";
        } else {
            $missing_tables[] = $table;
            echo "<span class='error'>‚ùå –¢–∞–±–ª–∏—Ü–∞ '$table' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</span><br>";
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ email
    if (in_array('users', $existing_tables)) {
        $query = "SHOW COLUMNS FROM users LIKE 'email'";
        $stmt = $db->prepare($query);
        $stmt->execute();
        
        if ($stmt->rowCount() == 0) {
            echo "<span class='warning'>‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ 'users' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'email'</span><br>";
            $missing_tables[] = 'users_update';
        } else {
            echo "<span class='success'>‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'users' —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'email'</span><br>";
        }
    }
    
    echo "</div>";
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
    if (!empty($missing_tables) || $force_recreate) {
        echo "<div class='section'>";
        echo "<h2>üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>";
        
        if ($force_recreate) {
            echo "<p class='warning'>‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...</p>";
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            $drop_tables = ['learning_progress', 'vocabulary', 'deck_assignments', 'decks', 'users'];
            foreach ($drop_tables as $table) {
                try {
                    $db->exec("DROP TABLE IF EXISTS $table");
                    echo "<span class='info'>üóëÔ∏è –¢–∞–±–ª–∏—Ü–∞ '$table' —É–¥–∞–ª–µ–Ω–∞</span><br>";
                } catch (PDOException $e) {
                    echo "<span class='warning'>‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É '$table': " . $e->getMessage() . "</span><br>";
                }
            }
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É users –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (in_array('users_update', $missing_tables)) {
                try {
                    $db->exec("ALTER TABLE users ADD COLUMN email VARCHAR(255) NULL AFTER last_name");
                    echo "<span class='success'>‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ 'email' –≤ —Ç–∞–±–ª–∏—Ü—É 'users'</span><br>";
                } catch (PDOException $e) {
                    echo "<span class='error'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è 'email': " . $e->getMessage() . "</span><br>";
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        $sql_commands = [
            "users" => "CREATE TABLE IF NOT EXISTS users (
                id INT AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(50) UNIQUE NOT NULL,
                password VARCHAR(255) NOT NULL,
                role ENUM('teacher', 'student') NOT NULL,
                first_name VARCHAR(100) NOT NULL,
                last_name VARCHAR(100) NOT NULL,
                email VARCHAR(255) NULL,
                teacher_id INT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (teacher_id) REFERENCES users(id) ON DELETE CASCADE
            )",
            
            "decks" => "CREATE TABLE IF NOT EXISTS decks (
                id INT AUTO_INCREMENT PRIMARY KEY,
                teacher_id INT NOT NULL,
                name VARCHAR(200) NOT NULL,
                description TEXT NULL,
                color VARCHAR(7) DEFAULT '#667eea',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (teacher_id) REFERENCES users(id) ON DELETE CASCADE
            )",
            
            "deck_assignments" => "CREATE TABLE IF NOT EXISTS deck_assignments (
                id INT AUTO_INCREMENT PRIMARY KEY,
                deck_id INT NOT NULL,
                student_id INT NOT NULL,
                assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (deck_id) REFERENCES decks(id) ON DELETE CASCADE,
                FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE,
                UNIQUE KEY unique_deck_student (deck_id, student_id)
            )",
            
            "vocabulary" => "CREATE TABLE IF NOT EXISTS vocabulary (
                id INT AUTO_INCREMENT PRIMARY KEY,
                deck_id INT NOT NULL,
                foreign_word VARCHAR(255) NOT NULL,
                translation VARCHAR(255) NOT NULL,
                image_path VARCHAR(500) NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (deck_id) REFERENCES decks(id) ON DELETE CASCADE
            )",
            
            "learning_progress" => "CREATE TABLE IF NOT EXISTS learning_progress (
                id INT AUTO_INCREMENT PRIMARY KEY,
                student_id INT NOT NULL,
                vocabulary_id INT NOT NULL,
                ease_factor DECIMAL(3,2) DEFAULT 2.50,
                interval_days INT DEFAULT 1,
                repetition_count INT DEFAULT 0,
                next_review_date DATE NOT NULL,
                last_review_date TIMESTAMP NULL,
                difficulty_rating ENUM('easy', 'hard') NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (vocabulary_id) REFERENCES vocabulary(id) ON DELETE CASCADE,
                UNIQUE KEY unique_student_vocabulary (student_id, vocabulary_id)
            )"
        ];
        
        foreach ($sql_commands as $table_name => $sql) {
            if (in_array($table_name, $missing_tables) || $force_recreate) {
                try {
                    $db->exec($sql);
                    echo "<span class='success'>‚úÖ –¢–∞–±–ª–∏—Ü–∞ '$table_name' —Å–æ–∑–¥–∞–Ω–∞</span><br>";
                } catch (PDOException $e) {
                    echo "<span class='error'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '$table_name': " . $e->getMessage() . "</span><br>";
                }
            }
        }
        
        echo "</div>";
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    echo "<div class='section'>";
    echo "<h2>üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>";
    
    $query = "SELECT COUNT(*) as count FROM users WHERE username = 'teacher'";
    $stmt = $db->prepare($query);
    $stmt->execute();
    $result = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if ($result['count'] == 0) {
        echo "<span class='warning'>‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é...</span><br>";
        
        $hashed_password = password_hash('password', PASSWORD_DEFAULT);
        $query = "INSERT INTO users (username, password, role, first_name, last_name, email) 
                  VALUES ('teacher', :password, 'teacher', '–¢–µ—Å—Ç–æ–≤—ã–π', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'teacher@example.com')";
        $stmt = $db->prepare($query);
        $stmt->bindParam(':password', $hashed_password);
        
        if ($stmt->execute()) {
            echo "<span class='success'>‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω (–ª–æ–≥–∏–Ω: teacher, –ø–∞—Ä–æ–ª—å: password)</span><br>";
        } else {
            echo "<span class='error'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</span><br>";
        }
    } else {
        echo "<span class='success'>‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ª–æ–≥–∏–Ω: teacher, –ø–∞—Ä–æ–ª—å: password)</span><br>";
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    $query = "SELECT COUNT(*) as count FROM users WHERE username = 'student1'";
    $stmt = $db->prepare($query);
    $stmt->execute();
    $result = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if ($result['count'] == 0) {
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        $query = "SELECT id FROM users WHERE username = 'teacher'";
        $stmt = $db->prepare($query);
        $stmt->execute();
        $teacher = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if ($teacher) {
            $hashed_password = password_hash('password', PASSWORD_DEFAULT);
            $query = "INSERT INTO users (username, password, role, first_name, last_name, teacher_id) 
                      VALUES ('student1', :password, 'student', '–¢–µ—Å—Ç–æ–≤—ã–π', '–£—á–µ–Ω–∏–∫', :teacher_id)";
            $stmt = $db->prepare($query);
            $stmt->bindParam(':password', $hashed_password);
            $stmt->bindParam(':teacher_id', $teacher['id']);
            
            if ($stmt->execute()) {
                echo "<span class='success'>‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —É—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω (–ª–æ–≥–∏–Ω: student1, –ø–∞—Ä–æ–ª—å: password)</span><br>";
            } else {
                echo "<span class='error'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞</span><br>";
            }
        }
    } else {
        echo "<span class='success'>‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —É—á–µ–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ª–æ–≥–∏–Ω: student1, –ø–∞—Ä–æ–ª—å: password)</span><br>";
    }
    
    echo "</div>";
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    echo "<div class='section'>";
    echo "<h2>üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å</h2>";
    
    $final_check = true;
    foreach ($tables_to_check as $table) {
        $query = "SHOW TABLES LIKE '$table'";
        $stmt = $db->prepare($query);
        $stmt->execute();
        
        if ($stmt->rowCount() == 0) {
            $final_check = false;
            break;
        }
    }
    
    if ($final_check) {
        echo "<h3 class='success'>üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!</h3>";
        echo "<p>–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.</p>";
        echo "<h4>–¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:</h4>";
        echo "<ul>";
        echo "<li><strong>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</strong> –ª–æ–≥–∏–Ω 'teacher', –ø–∞—Ä–æ–ª—å 'password'</li>";
        echo "<li><strong>–£—á–µ–Ω–∏–∫:</strong> –ª–æ–≥–∏–Ω 'student1', –ø–∞—Ä–æ–ª—å 'password'</li>";
        echo "</ul>";
        echo "<a href='index.php' class='btn'>üè† –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É</a>";
        echo "<a href='student_login.php' class='btn'>üë®‚Äçüéì –í—Ö–æ–¥ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤</a>";
    } else {
        echo "<h3 class='error'>‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</h3>";
        echo "<p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã:</p>";
        echo "<a href='setup.php?force=true' class='btn btn-danger'>üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã</a>";
    }
    
    echo "</div>";
    
} catch (Exception $e) {
    echo "<div class='section'>";
    echo "<h2 class='error'>‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h2>";
    echo "<p>–û—à–∏–±–∫–∞: " . htmlspecialchars($e->getMessage()) . "</p>";
    echo "<p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</p>";
    echo "<ul>";
    echo "<li>–ó–∞–ø—É—â–µ–Ω –ª–∏ MySQL —Å–µ—Ä–≤–µ—Ä</li>";
    echo "<li>–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ config/database.php</li>";
    echo "<li>–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'ramazang_quiz'</li>";
    echo "<li>–ï—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'ramazang_qusr'</li>";
    echo "</ul>";
    echo "</div>";
}

echo "</body></html>";
?>
