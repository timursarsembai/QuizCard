<?php
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */

session_start();
require_once 'config/database.php';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
if (!isset($_SESSION['user_id']) || $_SESSION['role'] !== 'teacher') {
    die('<h1>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞</h1><p>–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.</p>');
}

$database = new Database();
$db = $database->getConnection();

// –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

echo '<h1>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–æ–≤</h1>';
echo '<style>
body { font-family: Arial, sans-serif; margin: 20px; }
.success { color: green; background: #d4edda; padding: 10px; margin: 10px 0; border-radius: 5px; }
.error { color: red; background: #f8d7da; padding: 10px; margin: 10px 0; border-radius: 5px; }
.info { color: blue; background: #d1ecf1; padding: 10px; margin: 10px 0; border-radius: 5px; }
pre { background: #f8f9fa; padding: 10px; border-radius: 5px; overflow-x: auto; }
</style>';

$errors = [];
$success = [];

// SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
$tables = [
    'tests' => "
        CREATE TABLE IF NOT EXISTS tests (
            id INT AUTO_INCREMENT PRIMARY KEY,
            deck_id INT NOT NULL,
            name VARCHAR(255) NOT NULL,
            questions_count INT DEFAULT 10,
            time_limit INT NULL COMMENT '–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, NULL = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            FOREIGN KEY (deck_id) REFERENCES decks(id) ON DELETE CASCADE,
            INDEX idx_deck_id (deck_id)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    ",
    
    'test_questions' => "
        CREATE TABLE IF NOT EXISTS test_questions (
            id INT AUTO_INCREMENT PRIMARY KEY,
            test_id INT NOT NULL,
            question TEXT NOT NULL,
            option_a VARCHAR(500) NOT NULL,
            option_b VARCHAR(500) NOT NULL,
            option_c VARCHAR(500) NOT NULL,
            option_d VARCHAR(500) NOT NULL,
            correct_answer ENUM('A', 'B', 'C', 'D') NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE,
            INDEX idx_test_id (test_id)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    ",
    
    'test_attempts' => "
        CREATE TABLE IF NOT EXISTS test_attempts (
            id INT AUTO_INCREMENT PRIMARY KEY,
            test_id INT NOT NULL,
            student_id INT NOT NULL,
            score INT NOT NULL DEFAULT 0 COMMENT '–û—Ü–µ–Ω–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)',
            correct_answers INT NOT NULL DEFAULT 0,
            total_questions INT NOT NULL DEFAULT 0,
            time_spent INT NOT NULL DEFAULT 0 COMMENT '–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
            completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE,
            FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE,
            INDEX idx_test_student (test_id, student_id),
            INDEX idx_student_id (student_id),
            INDEX idx_completed_at (completed_at)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    ",
    
    'test_answers' => "
        CREATE TABLE IF NOT EXISTS test_answers (
            id INT AUTO_INCREMENT PRIMARY KEY,
            attempt_id INT NOT NULL,
            question_id INT NOT NULL,
            selected_answer ENUM('A', 'B', 'C', 'D') NOT NULL,
            is_correct BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (attempt_id) REFERENCES test_attempts(id) ON DELETE CASCADE,
            FOREIGN KEY (question_id) REFERENCES test_questions(id) ON DELETE CASCADE,
            UNIQUE KEY unique_attempt_question (attempt_id, question_id),
            INDEX idx_attempt_id (attempt_id),
            INDEX idx_question_id (question_id)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    "
];

echo '<div class="info">–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...</div>';

try {
    $db->beginTransaction();

    foreach ($tables as $table_name => $sql) {
        echo "<h3>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: $table_name</h3>";
        echo "<pre>" . htmlspecialchars($sql) . "</pre>";
        
        try {
            $stmt = $db->prepare($sql);
            $result = $stmt->execute();
            
            if ($result) {
                echo "<div class='success'>‚úÖ –¢–∞–±–ª–∏—Ü–∞ '$table_name' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</div>";
                $success[] = $table_name;
            } else {
                $error_info = $stmt->errorInfo();
                throw new Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '$table_name': " . $error_info[2]);
            }
        } catch (Exception $e) {
            echo "<div class='error'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '$table_name': " . $e->getMessage() . "</div>";
            $errors[] = $table_name . ': ' . $e->getMessage();
        }
    }

    if (empty($errors)) {
        $db->commit();
        echo '<div class="success"><h2>üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!</h2></div>';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        echo '<h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:</h3>';
        $check_query = "SHOW TABLES LIKE 'test%'";
        $stmt = $db->prepare($check_query);
        $stmt->execute();
        $tables_created = $stmt->fetchAll(PDO::FETCH_COLUMN);
        
        echo '<ul>';
        foreach ($tables_created as $table) {
            echo "<li>‚úÖ $table</li>";
        }
        echo '</ul>';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        echo '<h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:</h3>';
        foreach (array_keys($tables) as $table_name) {
            try {
                $count_query = "SELECT COUNT(*) as count FROM $table_name";
                $stmt = $db->prepare($count_query);
                $stmt->execute();
                $count = $stmt->fetch(PDO::FETCH_ASSOC)['count'];
                echo "<div class='info'>–¢–∞–±–ª–∏—Ü–∞ '$table_name': $count –∑–∞–ø–∏—Å–µ–π</div>";
            } catch (Exception $e) {
                echo "<div class='error'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π –≤ '$table_name': " . $e->getMessage() . "</div>";
            }
        }
        
    } else {
        $db->rollback();
        echo '<div class="error"><h2>‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü</h2>';
        echo '<ul>';
        foreach ($errors as $error) {
            echo "<li>$error</li>";
        }
        echo '</ul></div>';
    }

} catch (Exception $e) {
    $db->rollback();
    echo '<div class="error"><h2>‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h2>';
    echo '<p>' . $e->getMessage() . '</p></div>';
}

echo '<hr>';
echo '<div class="info">';
echo '<h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>';
echo '<ol>';
echo '<li>–ï—Å–ª–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</li>';
echo '<li>–¢–µ–ø–µ—Ä—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏"</li>';
echo '<li>–£—á–µ–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–¢–µ—Å—Ç—ã"</li>';
echo '<li>–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ - –æ–Ω –Ω–µ –ø–æ–≤—Ä–µ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ</li>';
echo '</ol>';
echo '</div>';

echo '<div class="info">';
echo '<h3>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–æ–≤:</h3>';
echo '<ul>';
echo '<li><strong>tests</strong> - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤</li>';
echo '<li><strong>test_questions</strong> - –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤</li>';
echo '<li><strong>test_attempts</strong> - –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ —É—á–µ–Ω–∏–∫–∞–º–∏</li>';
echo '<li><strong>test_answers</strong> - –æ—Ç–≤–µ—Ç—ã —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</li>';
echo '</ul>';
echo '</div>';

echo '<p><a href="teacher/decks.php">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–ª–æ–¥–∞–º–∏</a></p>';
?>
