<?php
// –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('log_errors', 1);

echo "<h1>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h1>";

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
echo "<h2>1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î</h2>";
try {
    require_once 'config/database.php';
    $database = new Database();
    $db = $database->getConnection();
    
    if ($database->isConnected()) {
        echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: OK<br>";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        $query = "SHOW COLUMNS FROM users";
        $stmt = $db->prepare($query);
        $stmt->execute();
        $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $required_fields = ['email_verified', 'verification_token', 'verification_token_expires', 'last_verification_sent'];
        $existing_fields = array_column($columns, 'Field');
        
        echo "‚úÖ –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users: " . implode(', ', $existing_fields) . "<br>";
        
        foreach ($required_fields as $field) {
            if (in_array($field, $existing_fields)) {
                echo "‚úÖ –ü–æ–ª–µ $field: –Ω–∞–π–¥–µ–Ω–æ<br>";
            } else {
                echo "‚ùå –ü–æ–ª–µ $field: –ù–ï –ù–ê–ô–î–ï–ù–û<br>";
            }
        }
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞ –ë–î: " . $database->getError() . "<br>";
    }
} catch (Exception $e) {
    echo "‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ë–î: " . $e->getMessage() . "<br>";
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–∞ User
echo "<h2>2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–∞ User</h2>";
try {
    require_once 'classes/User.php';
    $user = new User($db);
    echo "‚úÖ –ö–ª–∞—Å—Å User –∑–∞–≥—Ä—É–∂–µ–Ω<br>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    $methods = get_class_methods($user);
    $required_methods = ['generateVerificationToken', 'sendVerificationEmail', 'verifyEmail', 'isEmailVerified'];
    
    foreach ($required_methods as $method) {
        if (in_array($method, $methods)) {
            echo "‚úÖ –ú–µ—Ç–æ–¥ $method: –Ω–∞–π–¥–µ–Ω<br>";
        } else {
            echo "‚ùå –ú–µ—Ç–æ–¥ $method: –ù–ï –ù–ê–ô–î–ï–ù<br>";
        }
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∞ User: " . $e->getMessage() . "<br>";
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "<h2>3. –ü—Ä–æ–≤–µ—Ä–∫–∞ email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h2>";
try {
    require_once 'config/email_config.php';
    echo "‚úÖ EmailConfig –∑–∞–≥—Ä—É–∂–µ–Ω<br>";
    echo "‚úÖ From email: " . EmailConfig::$from_email . "<br>";
    echo "‚úÖ From name: " . EmailConfig::$from_name . "<br>";
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ mail()
    if (function_exists('mail')) {
        echo "‚úÖ –§—É–Ω–∫—Ü–∏—è mail() –¥–æ—Å—Ç—É–ø–Ω–∞<br>";
    } else {
        echo "‚ùå –§—É–Ω–∫—Ü–∏—è mail() –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞<br>";
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ EmailConfig: " . $e->getMessage() . "<br>";
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
echo "<h2>4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤</h2>";
try {
    require_once 'includes/translations.php';
    echo "‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã<br>";
    
    if (function_exists('translate')) {
        echo "‚úÖ –§—É–Ω–∫—Ü–∏—è translate() –¥–æ—Å—Ç—É–ø–Ω–∞<br>";
        echo "‚úÖ –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞: " . translate('success_register_email_sent') . "<br>";
    } else {
        echo "‚ùå –§—É–Ω–∫—Ü–∏—è translate() –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞<br>";
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: " . $e->getMessage() . "<br>";
}

// –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
echo "<h2>5. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ email)</h2>";
try {
    session_start();
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    $test_username = 'testuser_' . time();
    $test_email = 'test' . time() . '@example.com';
    $test_password = 'testpass123';
    $test_first_name = 'Test';
    $test_last_name = 'User';
    
    echo "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:<br>";
    echo "Username: $test_username<br>";
    echo "Email: $test_email<br>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if ($user->isUsernameExists($test_username)) {
        echo "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç<br>";
    } else {
        echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å<br>";
    }
    
    if ($user->isEmailExists($test_email)) {
        echo "‚ùå Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è<br>";
    } else {
        echo "‚úÖ Email —Å–≤–æ–±–æ–¥–µ–Ω<br>";
    }
    
    // –ù–ï —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã
    echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å<br>";
    
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " . $e->getMessage() . "<br>";
    echo "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: " . $e->getTraceAsString() . "<br>";
}

echo "<h2>üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>";
echo "<p>–ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</p>";
echo "<p>–ï—Å–ª–∏ –≤—Å—ë ‚úÖ, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:</p>";
echo "<ul>";
echo "<li>–û—à–∏–±–∫–∞—Ö –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞</li>";
echo "<li>–ù–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–∞–≤–∞—Ö –Ω–∞ –∑–∞–ø–∏—Å—å</li>";
echo "<li>–ü—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π email</li>";
echo "</ul>";

echo "<p><a href='login.php'>‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞</a></p>";
?>
