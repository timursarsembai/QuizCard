<?php
/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö QuizCard
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∏ —Ç–∞–±–ª–∏—Ü—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
 */

require_once '../config/database.php';

$database = new Database();
$db = $database->getConnection();

if (!$database->isConnected()) {
    die('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ' . $database->getError());
}

echo "<h1>üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö QuizCard</h1>";

$migrations = [];

try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—è
    $tables = $db->query("SHOW TABLES")->fetchAll(PDO::FETCH_COLUMN);
    
    // –ú–∏–≥—Ä–∞—Ü–∏—è 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    $users_columns = $db->query("SHOW COLUMNS FROM users")->fetchAll(PDO::FETCH_COLUMN);
    
    if (!in_array('email_verified', $users_columns)) {
        $db->exec("ALTER TABLE users ADD COLUMN email_verified BOOLEAN DEFAULT FALSE");
        $migrations[] = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ email_verified";
    }
    
    if (!in_array('verification_token', $users_columns)) {
        $db->exec("ALTER TABLE users ADD COLUMN verification_token VARCHAR(255) NULL");
        $migrations[] = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ verification_token";
    }
    
    if (!in_array('verification_token_expires', $users_columns)) {
        $db->exec("ALTER TABLE users ADD COLUMN verification_token_expires DATETIME NULL");
        $migrations[] = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ verification_token_expires";
    }
    
    if (!in_array('last_verification_sent', $users_columns)) {
        $db->exec("ALTER TABLE users ADD COLUMN last_verification_sent DATETIME NULL");
        $migrations[] = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ last_verification_sent";
    }
    
    // –ú–∏–≥—Ä–∞—Ü–∏—è 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞—É–¥–∏–æ
    $vocabulary_columns = $db->query("SHOW COLUMNS FROM vocabulary")->fetchAll(PDO::FETCH_COLUMN);
    
    if (!in_array('audio_path', $vocabulary_columns)) {
        $db->exec("ALTER TABLE vocabulary ADD COLUMN audio_path VARCHAR(500) NULL AFTER image_path");
        $migrations[] = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ audio_path –≤ vocabulary";
    }
    
    // –ú–∏–≥—Ä–∞—Ü–∏—è 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Ç–µ—Å—Ç–æ–≤
    if (!in_array('tests', $tables)) {
        $db->exec("
            CREATE TABLE tests (
                id INT AUTO_INCREMENT PRIMARY KEY,
                deck_id INT NOT NULL,
                name VARCHAR(255) NOT NULL,
                questions_count INT DEFAULT 10,
                time_limit INT NULL COMMENT '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (deck_id) REFERENCES decks(id) ON DELETE CASCADE
            )
        ");
        $migrations[] = "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ tests";
    }
    
    if (!in_array('test_questions', $tables)) {
        $db->exec("
            CREATE TABLE test_questions (
                id INT AUTO_INCREMENT PRIMARY KEY,
                test_id INT NOT NULL,
                question TEXT NOT NULL,
                option_a VARCHAR(255) NOT NULL,
                option_b VARCHAR(255) NOT NULL,
                option_c VARCHAR(255) NOT NULL,
                option_d VARCHAR(255) NOT NULL,
                correct_answer CHAR(1) NOT NULL CHECK (correct_answer IN ('A', 'B', 'C', 'D')),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE
            )
        ");
        $migrations[] = "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ test_questions";
    }
    
    if (!in_array('test_attempts', $tables)) {
        $db->exec("
            CREATE TABLE test_attempts (
                id INT AUTO_INCREMENT PRIMARY KEY,
                test_id INT NOT NULL,
                student_id INT NOT NULL,
                correct_answers INT NOT NULL DEFAULT 0,
                total_questions INT NOT NULL DEFAULT 0,
                score DECIMAL(5,2) NOT NULL DEFAULT 0.00 COMMENT '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
                time_spent INT NULL COMMENT '–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
                started_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP NULL,
                FOREIGN KEY (test_id) REFERENCES tests(id) ON DELETE CASCADE,
                FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE
            )
        ");
        $migrations[] = "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ test_attempts";
    }
    
    if (!in_array('test_answers', $tables)) {
        $db->exec("
            CREATE TABLE test_answers (
                id INT AUTO_INCREMENT PRIMARY KEY,
                attempt_id INT NOT NULL,
                question_id INT NOT NULL,
                selected_answer CHAR(1) NULL COMMENT 'A, B, C, D –∏–ª–∏ NULL –µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–µ–Ω–æ',
                is_correct BOOLEAN NOT NULL DEFAULT FALSE,
                answered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (attempt_id) REFERENCES test_attempts(id) ON DELETE CASCADE,
                FOREIGN KEY (question_id) REFERENCES test_questions(id) ON DELETE CASCADE
            )
        ");
        $migrations[] = "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ test_answers";
    }
    
    // –ú–∏–≥—Ä–∞—Ü–∏—è 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    $indexes = $db->query("SHOW INDEX FROM users WHERE Key_name = 'idx_users_email'")->fetchAll();
    if (empty($indexes)) {
        $db->exec("CREATE INDEX idx_users_email ON users(email)");
        $migrations[] = "‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å idx_users_email";
    }
    
    $indexes = $db->query("SHOW INDEX FROM users WHERE Key_name = 'idx_users_verification_token'")->fetchAll();
    if (empty($indexes)) {
        $db->exec("CREATE INDEX idx_users_verification_token ON users(verification_token)");
        $migrations[] = "‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å idx_users_verification_token";
    }
    
    $indexes = $db->query("SHOW INDEX FROM vocabulary WHERE Key_name = 'idx_vocabulary_audio_path'")->fetchAll();
    if (empty($indexes)) {
        $db->exec("CREATE INDEX idx_vocabulary_audio_path ON vocabulary(audio_path)");
        $migrations[] = "‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å idx_vocabulary_audio_path";
    }
    
    echo "<h2>üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:</h2>";
    if (empty($migrations)) {
        echo "<p>‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.</p>";
    } else {
        echo "<ul>";
        foreach ($migrations as $migration) {
            echo "<li>$migration</li>";
        }
        echo "</ul>";
    }
    
    echo "<p><strong>–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</strong></p>";
    echo "<p><a href='../'>‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>";
    
} catch (Exception $e) {
    echo "<h2>‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:</h2>";
    echo "<p>" . $e->getMessage() . "</p>";
    echo "<p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.</p>";
}
?>
