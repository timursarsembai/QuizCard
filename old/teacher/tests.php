<?php
// –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
error_reporting(E_ALL);
ini_set('display_errors', 1);

// –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
header("Cache-Control: no-cache, no-store, must-revalidate");
header("Pragma: no-cache");
header("Expires: 0");

session_start();
require_once '../config/database.php';
require_once '../classes/User.php';
require_once '../classes/Deck.php';
require_once '../classes/Test.php';
require_once '../includes/translations.php';

try {
    $database = new Database();
    $db = $database->getConnection();
    
    if (!$db) {
        throw new Exception("Database connection failed: " . $database->getError());
    }
    
    $user = new User($db);
    $deck = new Deck($db);
    $test = new Test($db);

    if (!$user->isLoggedIn() || $user->getRole() !== 'teacher') {
        header("Location: ../index.php");
        exit();
    }

    $teacher_id = $_SESSION['user_id'];
} catch (Exception $e) {
    die("Error: " . $e->getMessage());
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
if ($_POST && isset($_POST['create_test'])) {
    $deck_id = $_POST['deck_id'];
    $test_name = trim($_POST['test_name']);
    $questions_count = intval($_POST['questions_count']) ?: 10;
    $time_limit = intval($_POST['time_limit']) ?: null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–¥–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
    $deck_info = $deck->getDeckById($deck_id, $teacher_id);
    if ($deck_info && $test_name) {
        $test_id = $test->createTest($deck_id, $test_name, $questions_count, $time_limit);
        if ($test_id) {
            $success = "–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!";
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
            header("Location: test_edit.php?test_id=$test_id");
            exit();
        } else {
            $error = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞";
        }
    } else {
        $error = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è";
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
if ($_GET && isset($_GET['delete_test'])) {
    $test_id = $_GET['delete_test'];
    if ($test->deleteTest($test_id, $teacher_id)) {
        $success = "–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!";
    } else {
        $error = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞";
    }
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–¥—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
try {
    $decks = $deck->getDecksByTeacher($teacher_id);
} catch (Exception $e) {
    die("Error getting decks: " . $e->getMessage());
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
try {
    $all_tests = $test->getTestsByTeacher($teacher_id);
} catch (Exception $e) {
    die("Error getting tests: " . $e->getMessage());
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–¥—ã
foreach ($decks as &$deck_item) {
    $deck_item['tests_count'] = 0;
    foreach ($all_tests as $test_item) {
        if ($test_item['deck_id'] == $deck_item['id']) {
            $deck_item['tests_count']++;
        }
    }
}
unset($deck_item); // –í–∞–∂–Ω–æ! –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç

// –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
$total_tests = count($all_tests);
$total_attempts = 0;
foreach ($all_tests as $test_item) {
    $total_attempts += isset($test_item['attempts_count']) ? $test_item['attempts_count'] : 0;
}

$page_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏";
$page_icon = "fas fa-file-alt";
require_once 'header.php';
?>
<style>
    a.btn.btn-success {
        background-color: purple;
    }
    
    .btn-primary {
        background: #28a745;
        color: white;
    }

    .btn-primary:hover {
        background: #218838;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #545b62;
    }

    .btn-info {
        background: #17a2b8;
        color: white;
    }

    .btn-info:hover {
        background: #138496;
    }

    .btn-warning {
        background: #ffc107;
        color: #212529;
    }

    .btn-warning:hover {
        background: #e0a800;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    .stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        text-align: center;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: #667eea;
    }

    .stat-label {
        color: #666;
        margin-top: 0.5rem;
        font-size: 0.9rem;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        color: #333;
        font-weight: 500;
    }

    input[type="text"], input[type="number"], select, textarea {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #e1e1e1;
        border-radius: 5px;
        font-size: 1rem;
        transition: border-color 0.3s;
    }

    input[type="text"]:focus, input[type="number"]:focus, select:focus, textarea:focus {
        outline: none;
        border-color: #667eea;
    }

    .deck-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .deck-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        overflow: hidden;
        transition: transform 0.3s ease;
    }

    .deck-card:hover {
        transform: translateY(-5px);
    }

    .deck-header {
        padding: 1.5rem;
        color: white;
        position: relative;
    }

    .deck-info h3 {
        margin-bottom: 0.5rem;
        font-size: 1.2rem;
    }

    .deck-description {
        opacity: 0.9;
        font-size: 0.9rem;
    }

    .deck-content {
        padding: 1.5rem;
    }

    .deck-stats {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .stat {
        text-align: center;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #667eea;
    }

    .stat-text {
        font-size: 0.8rem;
        color: #666;
    }

    .deck-actions {
        display: flex;
        gap: 0.5rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    .tests-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .test-card {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transition: all 0.3s;
        border-left: 5px solid;
    }

    .test-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.15);
    }

    .test-header {
        margin-bottom: 1rem;
    }

    .test-name {
        font-size: 1.3rem;
        font-weight: 600;
        color: #333;
        margin-bottom: 0.5rem;
    }

    .deck-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        color: white;
        font-weight: 500;
    }

    .test-stats {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
        margin: 1rem 0;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .stat-item {
        text-align: center;
    }

    .test-actions {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .test-actions .btn {
        flex: 1;
        text-align: center;
        min-width: 80px;
        font-size: 0.85rem;
        padding: 0.4rem 0.8rem;
    }

    @media (max-width: 768px) {
        .form-grid {
            grid-template-columns: 1fr;
        }

        .deck-grid {
            grid-template-columns: 1fr;
        }

        .stats {
            grid-template-columns: 1fr 1fr;
        }

        .deck-actions {
            flex-direction: column;
        }
        
        .tests-grid {
            grid-template-columns: 1fr;
        }
        
        .test-actions {
            flex-direction: column;
        }

        .test-actions .btn {
            flex: none;
        }
    }
</style>

<div class="container">
    <?php include 'language_switcher.php'; ?>
    
    <?php if (isset($success)): ?>
        <div class="alert alert-success"><?php echo htmlspecialchars($success); ?></div>
    <?php endif; ?>

    <?php if (isset($error)): ?>
        <div class="alert alert-error"><?php echo htmlspecialchars($error); ?></div>
    <?php endif; ?>

    <div class="stats">
        <div class="stat-card">
            <div class="stat-number"><?php echo count($decks); ?></div>
            <div class="stat-label" data-translate-key="total_decks">–í—Å–µ–≥–æ –∫–æ–ª–æ–¥</div>
        </div>
        <div class="stat-card">
            <div class="stat-number"><?php echo $total_tests; ?></div>
            <div class="stat-label" data-translate-key="total_tests">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</div>
        </div>
        <div class="stat-card">
            <div class="stat-number"><?php echo $total_attempts; ?></div>
            <div class="stat-label" data-translate-key="total_attempts">–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫</div>
        </div>
    </div>

    <div class="card">
        <h2 data-translate-key="create_new_test">üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç</h2>
        <form method="POST" action="">
            <div class="form-grid">
                <div class="form-group">
                    <label for="deck_id" data-translate-key="select_deck">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É:</label>
                    <select name="deck_id" id="deck_id" required>
                        <option value="" data-translate-key="select_deck_option">-- –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É --</option>
                        <?php foreach ($decks as $deck_item): ?>
                            <option value="<?php echo $deck_item['id']; ?>" data-words-count="<?php echo $deck_item['word_count']; ?>">
                                <?php echo htmlspecialchars($deck_item['name']); ?> 
                                (<span class="words-count"><?php echo $deck_item['word_count']; ?></span> <span data-translate-key="words_plural">—Å–ª–æ–≤</span>)
                            </option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="form-group">
                    <label for="test_name" data-translate-key="test_name">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:</label>
                    <input type="text" name="test_name" id="test_name" data-translate-key="test_name_placeholder" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞" required>
                </div>
            </div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="questions_count" data-translate-key="questions_count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</label>
                    <input type="number" name="questions_count" id="questions_count" min="1" max="50" value="10" required>
                </div>
                <div class="form-group">
                    <label for="time_limit" data-translate-key="time_limit">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω—É—Ç—ã):</label>
                    <input type="number" name="time_limit" id="time_limit" min="1" max="60" data-translate-key="time_limit_placeholder" placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏">
                </div>
            </div>
            <button type="submit" name="create_test" class="btn btn-primary" data-translate-key="create_test_button">‚ú® –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç</button>
        </form>
    </div>

    <div class="card">
        <h2 data-translate-key="tests_by_decks">üìö –¢–µ—Å—Ç—ã –ø–æ –∫–æ–ª–æ–¥–∞–º</h2>
        
        <?php if (!empty($decks)): ?>
            <div class="deck-grid">
                <?php foreach ($decks as $deck_item): ?>
                    <div class="deck-card">
                        <div class="deck-header" style="background: <?php echo htmlspecialchars($deck_item['color']); ?>">
                            <div class="deck-info">
                                <h3><?php echo htmlspecialchars($deck_item['name']); ?></h3>
                                <div class="deck-description">
                                    <?php echo htmlspecialchars($deck_item['description']); ?>
                                </div>
                            </div>
                        </div>
                        <div class="deck-content">
                            <div class="deck-stats">
                                <div class="stat">
                                    <div class="stat-value"><?php echo $deck_item['word_count']; ?></div>
                                    <div class="stat-text" data-translate-key="words_in_deck">–°–ª–æ–≤ –≤ –∫–æ–ª–æ–¥–µ</div>
                                </div>
                                <div class="stat">
                                    <div class="stat-value"><?php echo $deck_item['tests_count']; ?></div>
                                    <div class="stat-text" data-translate-key="tests_created">–¢–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ</div>
                                </div>
                            </div>
                            <div class="deck-actions">
                                <a href="test_manager.php?deck_id=<?php echo $deck_item['id']; ?>" 
                                   class="btn btn-primary" 
                                   title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏">
                                    üß™ <span data-translate-key="tests_button">–¢–µ—Å—Ç—ã</span> (<?php echo $deck_item['tests_count']; ?>)
                                </a>
                                <?php if ($deck_item['word_count'] > 0): ?>
                                    <a href="test_manager.php?deck_id=<?php echo $deck_item['id']; ?>&create=1" 
                                       class="btn btn-success" 
                                       title="–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç">
                                        ‚ûï <span data-translate-key="create_test_button">–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç</span>
                                    </a>
                                <?php else: ?>
                                    <span class="btn btn-secondary" 
                                          style="opacity: 0.6;" 
                                          title="–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –≤ –∫–æ–ª–æ–¥—É">
                                        ‚ûï <span data-translate-key="create_test_button">–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç</span>
                                    </span>
                                <?php endif; ?>
                            </div>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
        <?php else: ?>
            <div class="empty-state">
                <h3 data-translate-key="no_decks_title">üìö –ù–µ—Ç –∫–æ–ª–æ–¥</h3>
                <p data-translate-key="no_decks_text">–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–ª–æ–¥—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∏—Ö —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã.</p>
                <a href="decks.php" class="btn btn-primary" style="margin-top: 1rem;" data-translate-key="go_to_decks">
                    üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–ª–æ–¥–∞–º
                </a>
            </div>
        <?php endif; ?>
    </div>

    <!-- –†–∞–∑–¥–µ–ª –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ -->
    <div class="card">
        <h2 data-translate-key="all_tests">üìã –í—Å–µ —Ç–µ—Å—Ç—ã</h2>
        <?php if (!empty($all_tests)): ?>
            <div class="tests-grid">
                <?php foreach ($all_tests as $test_item): ?>
                    <div class="test-card" style="border-left-color: <?php echo htmlspecialchars($test_item['deck_color']); ?>;">
                        <div class="test-header">
                            <div class="test-name"><?php echo htmlspecialchars($test_item['name']); ?></div>
                            <span class="deck-badge" style="background-color: <?php echo htmlspecialchars($test_item['deck_color']); ?>;">
                                <?php echo htmlspecialchars($test_item['deck_name']); ?>
                            </span>
                        </div>
                        
                        <div class="test-stats">
                            <div class="stat-item">
                                <div class="stat-number"><?php echo $test_item['questions_count']; ?></div>
                                <div class="stat-label" data-translate-key="questions">–í–æ–ø—Ä–æ—Å–æ–≤</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number"><?php echo isset($test_item['attempts_count']) ? $test_item['attempts_count'] : 0; ?></div>
                                <div class="stat-label" data-translate-key="attempts">–ü–æ–ø—ã—Ç–æ–∫</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number"><?php echo isset($test_item['unique_students']) ? $test_item['unique_students'] : 0; ?></div>
                                <div class="stat-label" data-translate-key="students">–£—á–µ–Ω–∏–∫–æ–≤</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">
                                    <?php echo (isset($test_item['avg_score']) && $test_item['avg_score']) ? round($test_item['avg_score'], 1) . '%' : '‚Äî'; ?>
                                </div>
                                <div class="stat-label" data-translate-key="avg_score">–°—Ä. –±–∞–ª–ª</div>
                            </div>
                        </div>

                        <div style="margin: 1rem 0; padding: 0.5rem; background: #e9ecef; border-radius: 5px; font-size: 0.9rem;">
                            <div><strong data-translate-key="time_label">–í—Ä–µ–º—è:</strong> 
                                <?php echo $test_item['time_limit'] ? $test_item['time_limit'] . ' <span data-translate-key="time_limit_minutes">–º–∏–Ω—É—Ç</span>' : '<span data-translate-key="no_time_limit">–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</span>'; ?>
                            </div>
                            <div><strong data-translate-key="created_label">–°–æ–∑–¥–∞–Ω:</strong> 
                                <?php echo date('d.m.Y H:i', strtotime($test_item['created_at'])); ?>
                            </div>
                        </div>
                        
                        <div class="test-actions">
                            <a href="test_edit.php?test_id=<?php echo $test_item['id']; ?>" class="btn btn-primary">
                                ‚úèÔ∏è <span data-translate-key="edit_test">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
                            </a>
                            <a href="test_preview.php?test_id=<?php echo $test_item['id']; ?>" class="btn btn-info">
                                üëÅÔ∏è <span data-translate-key="preview_test">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</span>
                            </a>
                            <a href="test_results.php?test_id=<?php echo $test_item['id']; ?>" class="btn btn-success">
                                üìä <span data-translate-key="test_results">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
                            </a>
                            <a href="?delete_test=<?php echo $test_item['id']; ?>" 
                               class="btn btn-danger" 
                               onclick="return confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')"
                               data-confirm-key="delete_test_confirm">
                               üóëÔ∏è <span data-translate-key="delete_test">–£–¥–∞–ª–∏—Ç—å</span>
                            </a>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
        <?php else: ?>
            <div class="empty-state">
                <h3 data-translate-key="no_tests_title">üéØ –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤</h3>
                <p data-translate-key="no_tests_text">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ</p>
            </div>
        <?php endif; ?>
    </div>
</div>

<script>
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(function() {
        const alerts = document.querySelectorAll('.alert-success, .alert-error');
        alerts.forEach(alert => {
            alert.style.opacity = '0';
            alert.style.transition = 'opacity 0.5s';
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.parentNode.removeChild(alert);
                }
            }, 500);
        });
    }, 5000);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    document.querySelector('form').addEventListener('submit', function(e) {
        const deckSelect = document.getElementById('deck_id');
        const testName = document.getElementById('test_name');
        const questionsCount = document.getElementById('questions_count');

        if (!deckSelect.value) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞');
            e.preventDefault();
            return;
        }

        if (!testName.value.trim()) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞');
            e.preventDefault();
            return;
        }

        if (parseInt(questionsCount.value) < 1) {
            alert('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
            e.preventDefault();
            return;
        }
    });
</script>
</body>
</html>
