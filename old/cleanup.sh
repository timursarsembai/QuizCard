#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ QuizCard
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ QuizCard..."

# –°—á–µ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
DELETED_COUNT=0

# –£–¥–∞–ª—è–µ–º .DS_Store —Ñ–∞–π–ª—ã (macOS)
if find "$PROJECT_ROOT" -name ".DS_Store" -type f 2>/dev/null | grep -q .; then
    echo "–£–¥–∞–ª—è–µ–º .DS_Store —Ñ–∞–π–ª—ã..."
    find "$PROJECT_ROOT" -name ".DS_Store" -type f -delete
    DELETED_COUNT=$((DELETED_COUNT + $(find "$PROJECT_ROOT" -name ".DS_Store" -type f 2>/dev/null | wc -l)))
fi

# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
TEMP_PATTERNS=("*.swp" "*~" "*.backup" "*.tmp" "*.bak" "*.old")
for pattern in "${TEMP_PATTERNS[@]}"; do
    if find "$PROJECT_ROOT" -name "$pattern" -type f 2>/dev/null | grep -q .; then
        echo "–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã: $pattern"
        COUNT=$(find "$PROJECT_ROOT" -name "$pattern" -type f 2>/dev/null | wc -l)
        find "$PROJECT_ROOT" -name "$pattern" -type f -delete
        DELETED_COUNT=$((DELETED_COUNT + COUNT))
    fi
done

# –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É temp –≤ uploads (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã)
TEMP_DIR="$PROJECT_ROOT/uploads/audio/temp"
if [ -d "$TEMP_DIR" ]; then
    TEMP_FILES=$(find "$TEMP_DIR" -type f ! -name ".htaccess" 2>/dev/null | wc -l)
    if [ "$TEMP_FILES" -gt 0 ]; then
        echo "–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É uploads/audio/temp..."
        find "$TEMP_DIR" -type f ! -name ".htaccess" -delete
        DELETED_COUNT=$((DELETED_COUNT + TEMP_FILES))
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–∏–µ
LOG_DIR="$PROJECT_ROOT/logs"
if [ -d "$LOG_DIR" ]; then
    for log_file in "$LOG_DIR"/*.log; do
        if [ -f "$log_file" ]; then
            SIZE=$(stat -f%z "$log_file" 2>/dev/null || stat -c%s "$log_file" 2>/dev/null)
            if [ "$SIZE" -gt 10485760 ]; then # 10MB
                echo "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –õ–æ–≥-—Ñ–∞–π–ª $(basename "$log_file") –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ 10MB"
                echo "   –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ SecurityLogger::rotateLogFile()"
            fi
        fi
    done
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –∫–æ–¥–µ
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∫–æ–¥–∞..."
DEBUG_PATTERNS=("var_dump(" "print_r(" "echo.*DEBUG" "console.log.*debug")
DEBUG_FOUND=false

for pattern in "${DEBUG_PATTERNS[@]}"; do
    if grep -r --include="*.php" --include="*.js" "$pattern" "$PROJECT_ROOT" 2>/dev/null | grep -v "cleanup.sh" | grep -q .; then
        if [ "$DEBUG_FOUND" = false ]; then
            echo "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –∫–æ–¥:"
            DEBUG_FOUND=true
        fi
        grep -r --include="*.php" --include="*.js" "$pattern" "$PROJECT_ROOT" 2>/dev/null | grep -v "cleanup.sh" | head -5
    fi
done

if [ "$DEBUG_FOUND" = false ]; then
    echo "‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤..."
DUPLICATES_FOUND=false

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
SUSPICIOUS_PATTERNS=("*-new.*" "*-old.*" "*-backup.*" "*-copy.*" "*_new.*" "*_old.*" "*_backup.*" "*_copy.*")
for pattern in "${SUSPICIOUS_PATTERNS[@]}"; do
    if find "$PROJECT_ROOT" -name "$pattern" -type f 2>/dev/null | grep -q .; then
        if [ "$DUPLICATES_FOUND" = false ]; then
            echo "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã):"
            DUPLICATES_FOUND=true
        fi
        find "$PROJECT_ROOT" -name "$pattern" -type f 2>/dev/null
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º PHP —Ñ–∞–π–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ MD5 —Ö–µ—à–∞–º–∏
DUPLICATE_HASHES=$(find "$PROJECT_ROOT" -name "*.php" -exec md5 {} \; 2>/dev/null | awk '{print $4}' | sort | uniq -d)
if [ -n "$DUPLICATE_HASHES" ]; then
    if [ "$DUPLICATES_FOUND" = false ]; then
        echo "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:"
        DUPLICATES_FOUND=true
    fi
    for hash in $DUPLICATE_HASHES; do
        echo "–î—É–±–ª–∏–∫–∞—Ç—ã —Å —Ö–µ—à–µ–º $hash:"
        find "$PROJECT_ROOT" -name "*.php" -exec md5 {} \; 2>/dev/null | grep "$hash"
    done
fi

if [ "$DUPLICATES_FOUND" = false ]; then
    echo "‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

echo ""
echo "üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "üìä –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $DELETED_COUNT"
echo "üíæ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: $(du -sh "$PROJECT_ROOT" | cut -f1)"
echo ""

if [ "$DELETED_COUNT" -eq 0 ]; then
    echo "‚ú® –ü—Ä–æ–µ–∫—Ç —É–∂–µ —á–∏—Å—Ç!"
else
    echo "üßπ –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
fi
